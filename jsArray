1. arr.splice(rowIndex - 1,rowCount) delete  
    
    findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。  
    arr.splice(arr.findIndex(item => item.id === 8), 1)  

2. arr.slice(0)  copy

3. isNaN() 函数用于检查其参数是否是非数字值。true:非数字

4. str.slice(0,str.length-1) 去除最后一个字符串 返回新的字符串对象

5. //判断数组中是否含有某一元素
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var a = fruits.indexOf("Apple"); // 2

6. //对象数组去重
dealDistinct:function(arr){
    var obj = {};
    return arr.reduce(function(item, next) {
        obj[next.value] ? '' : obj[next.value] = true && item.push(next);
        return item;
    }, []);
}

7. 空对象判断 {}
1--
function fun(){
    for(var key in Obj){
        return true;
    }
    return false;
}

2--
if(JSON.stringify(obj) == "{}"){
    return false;
}

3--
if(Object.keys(Obj).length > 0){
    return true;
}

8. /*按id分组*/
arrayGroup:function(arr){
    var map = {},
    dest = [];
    for(var i = 0; i < arr.length; i++){
        var ai = arr[i];
        if(!map[ai.id]){
            dest.push({
                id: ai.id,
                name: ai.name,
                data: [ai]
            });
            map[ai.id] = ai;
        }else{
            for(var j = 0; j < dest.length; j++){
                var dj = dest[j];
                if(dj.id == ai.id){
                    dj.data.push(ai);
                    break;
                }
            }
        }
    }
    return dest;
},
[
    {"id":"1001","name":"值1","value":"111"},
    {"id":"1001","name":"值1","value":"11111"},
    {"id":"1002","name":"值2","value":"25462"}
]
==>
[
    {
        "id": "1001",
        "name": "值1",
        "data": [
            {"id": "1001", "name": "值1", "value": "111"},
            { "id": "1001", "name": "值1", "value": "11111"}
        ]
    },
    {
        "id": "1002",
        "name": "值2",
        "data": [
            { "id": "1002",  "name": "值2", "value": "25462" }, 
        ]
    }
]

9. 递归查找对应id对象集合
/** 
 * 递归查找
 * @param  {} source 数据源
 * @param  {} targetId 支持单id跟id数组
 * @param  {} result 返回值
 * @param  {} propsId Identified key default:id
 * @param  {} propsChildren  Identified children key default:children
 */
export function findTarget(source, targetId, result, propsId="id", propsChildren="children") {  
    if (targetId instanceof Array) {
        for (let id of targetId) {
            findTargetArr(source, id, result, propsId, propsChildren)
        } 
    } else{
        findTargetArr(source, targetId, result, propsId, propsChildren)
    }
}
function findTargetArr(source, targetId, result, propsId, propsChildren) {
    if (source && source.length) {
        for (let item of source) {
            if (item[propsId] === targetId) {
                result.push(item);
            } else if (item[propsChildren] && item[propsChildren].length){
                findTargetArr(item[propsChildren], targetId, result, propsId, propsChildren);
            }
        }
    }
}

使用==>
let result = [];
this.findTarget(dataSource, idArr, result); 
console.log(result);

10. map 映射  
在实际使用的时候，我们可以利用map方法方便获得对象数组中的特定属性值们。例如下面这个例子（之后的兼容demo也是该例子）：
var users = [
  {name: "张含韵", "email": "zhang@email.com"},
  {name: "江一燕",   "email": "jiang@email.com"},
  {name: "李小璐",  "email": "li@email.com"}
];

var emails = users.map(function (user) { return user.email; });

console.log(emails.join(", ")); // zhang@email.com, jiang@email.com, li@email.com

11. filter 过滤   
var newarr = [
  { num: 1, val: 'ceshi', flag: 'aa' },
  { num: 2, val: 'ceshi2', flag: 'aa2'  }
]
console.log(newarr.filter(item => item.num===2 ))

12. find 
语法与filter一致，区别在于find返回单个对象而非数组，找到第一个符合条件即返回，未找到符合条件的返回undediend


